/* Jison generated parser */
var grammar = (function(){
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"actions":4,"EOF":5,"code_block":6,"o_CURLY":7,"c_CURLY":8,"action":9,"t_IF":10,"expression":11,"t_WHILE":12,"IDENTIFIER":13,"=":14,"t_RETURN":15,"func_call_expr":16,"ref":17,"o_SQUARE":18,"c_SQUARE":19,"t_EACH":20,",":21,"t_IN":22,"@":23,"<":24,">":25,"operation_expr":26,"func_call_async_expr":27,"func_define_expr":28,"literal":29,"o_BRACKET":30,"c_BRACKET":31,"array_raw_expr":32,"array_access":33,"+":34,"-":35,"*":36,"/":37,">=":38,"<=":39,"==":40,"!=":41,"&":42,"|":43,"t_INDEXOF":44,"voidable_expr_list":45,"t_FUN":46,"voidable_id_list":47,"lit_BOOL":48,"lit_NUM":49,"lit_STR":50,"t_NULL":51,"id_list":52,"expr_list":53,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"o_CURLY",8:"c_CURLY",10:"t_IF",12:"t_WHILE",13:"IDENTIFIER",14:"=",15:"t_RETURN",18:"o_SQUARE",19:"c_SQUARE",20:"t_EACH",21:",",22:"t_IN",23:"@",24:"<",25:">",27:"func_call_async_expr",30:"o_BRACKET",31:"c_BRACKET",34:"+",35:"-",36:"*",37:"/",38:">=",39:"<=",40:"==",41:"!=",42:"&",43:"|",44:"t_INDEXOF",46:"t_FUN",48:"lit_BOOL",49:"lit_NUM",50:"lit_STR",51:"t_NULL"},
productions_: [0,[3,2],[6,3],[4,0],[4,2],[9,3],[9,3],[9,3],[9,2],[9,1],[9,6],[9,7],[9,7],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,3],[11,1],[11,1],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[32,3],[28,5],[16,4],[33,4],[17,1],[29,1],[29,1],[29,1],[29,1],[47,0],[47,1],[52,1],[52,3],[45,0],[45,1],[53,1],[53,3]],
performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$
) {

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2:this.$ = $$[$0-1];
break;
case 3: this.$ = [] 
break;
case 4:
            $$[$0].unshift($$[$0-1]);
            this.$ = $$[$0];
        
break;
case 5: this.$ = ast_action_conditional($$[$0-1], $$[$0]); 
break;
case 6: this.$ = ast_action_while($$[$0-1], $$[$0]); 
break;
case 7: this.$ = ast_action_assign($$[$0-2], $$[$0]); 
break;
case 8: this.$ = ast_action_return($$[$0]); 
break;
case 9: this.$ = ast_lone_expression($$[$0]); 
break;
case 10: this.$ = ast_action_assign_array_value($$[$0-5], $$[$0-3], $$[$0]); 
break;
case 11: this.$ = ast_for_each($$[$0-5], $$[$0-3], $$[$0-1], $$[$0]); 
break;
case 12: this.$ = ast_promise($$[$0-5], $$[$0-3], $$[$0-1]); 
break;
case 19: this.$ = $$[$0-1] 
break;
case 22: this.$ = ast_expr_operation($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 23: this.$ = ast_expr_operation($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 24: this.$ = ast_expr_operation($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 25: this.$ = ast_expr_operation($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 26: this.$ = ast_expr_operation($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 27: this.$ = ast_expr_operation($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 28: this.$ = ast_expr_operation($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 29: this.$ = ast_expr_operation($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 30: this.$ = ast_expr_operation($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 31: this.$ = ast_expr_operation($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 32: this.$ = ast_expr_operation($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 33: this.$ = ast_expr_operation($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 34: this.$ = ast_expr_array_contains($$[$0-2], $$[$0]); 
break;
case 35: this.$ = ast_expr_array_contains_key($$[$0-2], $$[$0]); 
break;
case 36: this.$ = ast_expr_raw_array($$[$0-1]); 
break;
case 37: this.$ = ast_expr_define_func($$[$0-2], $$[$0]); 
break;
case 38: this.$ = ast_expr_call_func($$[$0-3], $$[$0-1]); 
break;
case 39: this.$ = ast_array_access($$[$0-3], $$[$0-1]); 
break;
case 40: this.$ = ast_expr_ref($$[$0]); 
break;
case 41: this.$ = ast_expr_literal(yytext === 'true'); 
break;
case 42: this.$ = ast_expr_literal(Number(yytext)); 
break;
case 43: this.$ = ast_expr_literal( yytext.substring(1, yytext.length-1) ); 
break;
case 44: this.$ = ast_expr_literal(null); 
break;
case 47: this.$ = [$$[$0]] 
break;
case 48:
            $$[$0].unshift($$[$0-2]);
            this.$ = $$[$0];
        
break;
case 51: this.$ = [$$[$0]] 
break;
case 52:
            $$[$0].unshift($$[$0-2]);
            this.$ = $$[$0];
        
break;
}
},
table: [{3:1,4:2,5:[2,3],9:3,10:[1,4],12:[1,5],13:[1,6],15:[1,7],16:8,17:9,20:[1,10],23:[1,11]},{1:[3]},{5:[1,12]},{4:13,5:[2,3],8:[2,3],9:3,10:[1,4],12:[1,5],13:[1,6],15:[1,7],16:8,17:9,20:[1,10],23:[1,11]},{11:14,13:[1,25],16:16,17:19,18:[1,30],26:15,27:[1,17],28:18,29:20,30:[1,21],32:22,33:23,46:[1,24],48:[1,26],49:[1,27],50:[1,28],51:[1,29]},{11:31,13:[1,25],16:16,17:19,18:[1,30],26:15,27:[1,17],28:18,29:20,30:[1,21],32:22,33:23,46:[1,24],48:[1,26],49:[1,27],50:[1,28],51:[1,29]},{14:[1,32],18:[2,40],30:[2,40]},{11:33,13:[1,25],16:16,17:19,18:[1,30],26:15,27:[1,17],28:18,29:20,30:[1,21],32:22,33:23,46:[1,24],48:[1,26],49:[1,27],50:[1,28],51:[1,29]},{5:[2,9],8:[2,9],10:[2,9],12:[2,9],13:[2,9],15:[2,9],20:[2,9],23:[2,9]},{18:[1,34],30:[1,35]},{13:[1,36]},{11:37,13:[1,25],16:16,17:19,18:[1,30],26:15,27:[1,17],28:18,29:20,30:[1,21],32:22,33:23,46:[1,24],48:[1,26],49:[1,27],50:[1,28],51:[1,29]},{1:[2,1]},{5:[2,4],8:[2,4]},{6:38,7:[1,53],22:[1,51],24:[1,44],25:[1,43],34:[1,39],35:[1,40],36:[1,41],37:[1,42],38:[1,45],39:[1,46],40:[1,47],41:[1,48],42:[1,49],43:[1,50],44:[1,52]},{5:[2,13],7:[2,13],8:[2,13],10:[2,13],12:[2,13],13:[2,13],15:[2,13],19:[2,13],20:[2,13],21:[2,13],22:[2,13],23:[2,13],24:[2,13],25:[2,13],31:[2,13],34:[2,13],35:[2,13],36:[2,13],37:[2,13],38:[2,13],39:[2,13],40:[2,13],41:[2,13],42:[2,13],43:[2,13],44:[2,13]},{5:[2,14],7:[2,14],8:[2,14],10:[2,14],12:[2,14],13:[2,14],15:[2,14],19:[2,14],20:[2,14],21:[2,14],22:[2,14],23:[2,14],24:[2,14],25:[2,14],31:[2,14],34:[2,14],35:[2,14],36:[2,14],37:[2,14],38:[2,14],39:[2,14],40:[2,14],41:[2,14],42:[2,14],43:[2,14],44:[2,14]},{5:[2,15],7:[2,15],8:[2,15],10:[2,15],12:[2,15],13:[2,15],15:[2,15],19:[2,15],20:[2,15],21:[2,15],22:[2,15],23:[2,15],24:[2,15],25:[2,15],31:[2,15],34:[2,15],35:[2,15],36:[2,15],37:[2,15],38:[2,15],39:[2,15],40:[2,15],41:[2,15],42:[2,15],43:[2,15],44:[2,15]},{5:[2,16],7:[2,16],8:[2,16],10:[2,16],12:[2,16],13:[2,16],15:[2,16],19:[2,16],20:[2,16],21:[2,16],22:[2,16],23:[2,16],24:[2,16],25:[2,16],31:[2,16],34:[2,16],35:[2,16],36:[2,16],37:[2,16],38:[2,16],39:[2,16],40:[2,16],41:[2,16],42:[2,16],43:[2,16],44:[2,16]},{5:[2,17],7:[2,17],8:[2,17],10:[2,17],12:[2,17],13:[2,17],15:[2,17],18:[1,54],19:[2,17],20:[2,17],21:[2,17],22:[2,17],23:[2,17],24:[2,17],25:[2,17],30:[1,35],31:[2,17],34:[2,17],35:[2,17],36:[2,17],37:[2,17],38:[2,17],39:[2,17],40:[2,17],41:[2,17],42:[2,17],43:[2,17],44:[2,17]},{5:[2,18],7:[2,18],8:[2,18],10:[2,18],12:[2,18],13:[2,18],15:[2,18],19:[2,18],20:[2,18],21:[2,18],22:[2,18],23:[2,18],24:[2,18],25:[2,18],31:[2,18],34:[2,18],35:[2,18],36:[2,18],37:[2,18],38:[2,18],39:[2,18],40:[2,18],41:[2,18],42:[2,18],43:[2,18],44:[2,18]},{11:55,13:[1,25],16:16,17:19,18:[1,30],26:15,27:[1,17],28:18,29:20,30:[1,21],32:22,33:23,46:[1,24],48:[1,26],49:[1,27],50:[1,28],51:[1,29]},{5:[2,20],7:[2,20],8:[2,20],10:[2,20],12:[2,20],13:[2,20],15:[2,20],19:[2,20],20:[2,20],21:[2,20],22:[2,20],23:[2,20],24:[2,20],25:[2,20],31:[2,20],34:[2,20],35:[2,20],36:[2,20],37:[2,20],38:[2,20],39:[2,20],40:[2,20],41:[2,20],42:[2,20],43:[2,20],44:[2,20]},{5:[2,21],7:[2,21],8:[2,21],10:[2,21],12:[2,21],13:[2,21],15:[2,21],19:[2,21],20:[2,21],21:[2,21],22:[2,21],23:[2,21],24:[2,21],25:[2,21],31:[2,21],34:[2,21],35:[2,21],36:[2,21],37:[2,21],38:[2,21],39:[2,21],40:[2,21],41:[2,21],42:[2,21],43:[2,21],44:[2,21]},{30:[1,56]},{5:[2,40],7:[2,40],8:[2,40],10:[2,40],12:[2,40],13:[2,40],15:[2,40],18:[2,40],19:[2,40],20:[2,40],21:[2,40],22:[2,40],23:[2,40],24:[2,40],25:[2,40],30:[2,40],31:[2,40],34:[2,40],35:[2,40],36:[2,40],37:[2,40],38:[2,40],39:[2,40],40:[2,40],41:[2,40],42:[2,40],43:[2,40],44:[2,40]},{5:[2,41],7:[2,41],8:[2,41],10:[2,41],12:[2,41],13:[2,41],15:[2,41],19:[2,41],20:[2,41],21:[2,41],22:[2,41],23:[2,41],24:[2,41],25:[2,41],31:[2,41],34:[2,41],35:[2,41],36:[2,41],37:[2,41],38:[2,41],39:[2,41],40:[2,41],41:[2,41],42:[2,41],43:[2,41],44:[2,41]},{5:[2,42],7:[2,42],8:[2,42],10:[2,42],12:[2,42],13:[2,42],15:[2,42],19:[2,42],20:[2,42],21:[2,42],22:[2,42],23:[2,42],24:[2,42],25:[2,42],31:[2,42],34:[2,42],35:[2,42],36:[2,42],37:[2,42],38:[2,42],39:[2,42],40:[2,42],41:[2,42],42:[2,42],43:[2,42],44:[2,42]},{5:[2,43],7:[2,43],8:[2,43],10:[2,43],12:[2,43],13:[2,43],15:[2,43],19:[2,43],20:[2,43],21:[2,43],22:[2,43],23:[2,43],24:[2,43],25:[2,43],31:[2,43],34:[2,43],35:[2,43],36:[2,43],37:[2,43],38:[2,43],39:[2,43],40:[2,43],41:[2,43],42:[2,43],43:[2,43],44:[2,43]},{5:[2,44],7:[2,44],8:[2,44],10:[2,44],12:[2,44],13:[2,44],15:[2,44],19:[2,44],20:[2,44],21:[2,44],22:[2,44],23:[2,44],24:[2,44],25:[2,44],31:[2,44],34:[2,44],35:[2,44],36:[2,44],37:[2,44],38:[2,44],39:[2,44],40:[2,44],41:[2,44],42:[2,44],43:[2,44],44:[2,44]},{11:59,13:[1,25],16:16,17:19,18:[1,30],19:[2,49],26:15,27:[1,17],28:18,29:20,30:[1,21],32:22,33:23,45:57,46:[1,24],48:[1,26],49:[1,27],50:[1,28],51:[1,29],53:58},{6:60,7:[1,53],22:[1,51],24:[1,44],25:[1,43],34:[1,39],35:[1,40],36:[1,41],37:[1,42],38:[1,45],39:[1,46],40:[1,47],41:[1,48],42:[1,49],43:[1,50],44:[1,52]},{11:61,13:[1,25],16:16,17:19,18:[1,30],26:15,27:[1,17],28:18,29:20,30:[1,21],32:22,33:23,46:[1,24],48:[1,26],49:[1,27],50:[1,28],51:[1,29]},{5:[2,8],8:[2,8],10:[2,8],12:[2,8],13:[2,8],15:[2,8],20:[2,8],22:[1,51],23:[2,8],24:[1,44],25:[1,43],34:[1,39],35:[1,40],36:[1,41],37:[1,42],38:[1,45],39:[1,46],40:[1,47],41:[1,48],42:[1,49],43:[1,50],44:[1,52]},{11:62,13:[1,25],16:16,17:19,18:[1,30],26:15,27:[1,17],28:18,29:20,30:[1,21],32:22,33:23,46:[1,24],48:[1,26],49:[1,27],50:[1,28],51:[1,29]},{11:59,13:[1,25],16:16,17:19,18:[1,30],26:15,27:[1,17],28:18,29:20,30:[1,21],31:[2,49],32:22,33:23,45:63,46:[1,24],48:[1,26],49:[1,27],50:[1,28],51:[1,29],53:58},{21:[1,64]},{22:[1,51],24:[1,65],25:[1,43],34:[1,39],35:[1,40],36:[1,41],37:[1,42],38:[1,45],39:[1,46],40:[1,47],41:[1,48],42:[1,49],43:[1,50],44:[1,52]},{5:[2,5],8:[2,5],10:[2,5],12:[2,5],13:[2,5],15:[2,5],20:[2,5],23:[2,5]},{11:66,13:[1,25],16:16,17:19,18:[1,30],26:15,27:[1,17],28:18,29:20,30:[1,21],32:22,33:23,46:[1,24],48:[1,26],49:[1,27],50:[1,28],51:[1,29]},{11:67,13:[1,25],16:16,17:19,18:[1,30],26:15,27:[1,17],28:18,29:20,30:[1,21],32:22,33:23,46:[1,24],48:[1,26],49:[1,27],50:[1,28],51:[1,29]},{11:68,13:[1,25],16:16,17:19,18:[1,30],26:15,27:[1,17],28:18,29:20,30:[1,21],32:22,33:23,46:[1,24],48:[1,26],49:[1,27],50:[1,28],51:[1,29]},{11:69,13:[1,25],16:16,17:19,18:[1,30],26:15,27:[1,17],28:18,29:20,30:[1,21],32:22,33:23,46:[1,24],48:[1,26],49:[1,27],50:[1,28],51:[1,29]},{11:70,13:[1,25],16:16,17:19,18:[1,30],26:15,27:[1,17],28:18,29:20,30:[1,21],32:22,33:23,46:[1,24],48:[1,26],49:[1,27],50:[1,28],51:[1,29]},{11:71,13:[1,25],16:16,17:19,18:[1,30],26:15,27:[1,17],28:18,29:20,30:[1,21],32:22,33:23,46:[1,24],48:[1,26],49:[1,27],50:[1,28],51:[1,29]},{11:72,13:[1,25],16:16,17:19,18:[1,30],26:15,27:[1,17],28:18,29:20,30:[1,21],32:22,33:23,46:[1,24],48:[1,26],49:[1,27],50:[1,28],51:[1,29]},{11:73,13:[1,25],16:16,17:19,18:[1,30],26:15,27:[1,17],28:18,29:20,30:[1,21],32:22,33:23,46:[1,24],48:[1,26],49:[1,27],50:[1,28],51:[1,29]},{11:74,13:[1,25],16:16,17:19,18:[1,30],26:15,27:[1,17],28:18,29:20,30:[1,21],32:22,33:23,46:[1,24],48:[1,26],49:[1,27],50:[1,28],51:[1,29]},{11:75,13:[1,25],16:16,17:19,18:[1,30],26:15,27:[1,17],28:18,29:20,30:[1,21],32:22,33:23,46:[1,24],48:[1,26],49:[1,27],50:[1,28],51:[1,29]},{11:76,13:[1,25],16:16,17:19,18:[1,30],26:15,27:[1,17],28:18,29:20,30:[1,21],32:22,33:23,46:[1,24],48:[1,26],49:[1,27],50:[1,28],51:[1,29]},{11:77,13:[1,25],16:16,17:19,18:[1,30],26:15,27:[1,17],28:18,29:20,30:[1,21],32:22,33:23,46:[1,24],48:[1,26],49:[1,27],50:[1,28],51:[1,29]},{11:78,13:[1,25],16:16,17:19,18:[1,30],26:15,27:[1,17],28:18,29:20,30:[1,21],32:22,33:23,46:[1,24],48:[1,26],49:[1,27],50:[1,28],51:[1,29]},{11:79,13:[1,25],16:16,17:19,18:[1,30],26:15,27:[1,17],28:18,29:20,30:[1,21],32:22,33:23,46:[1,24],48:[1,26],49:[1,27],50:[1,28],51:[1,29]},{4:80,8:[2,3],9:3,10:[1,4],12:[1,5],13:[1,6],15:[1,7],16:8,17:9,20:[1,10],23:[1,11]},{11:81,13:[1,25],16:16,17:19,18:[1,30],26:15,27:[1,17],28:18,29:20,30:[1,21],32:22,33:23,46:[1,24],48:[1,26],49:[1,27],50:[1,28],51:[1,29]},{22:[1,51],24:[1,44],25:[1,43],31:[1,82],34:[1,39],35:[1,40],36:[1,41],37:[1,42],38:[1,45],39:[1,46],40:[1,47],41:[1,48],42:[1,49],43:[1,50],44:[1,52]},{13:[1,85],31:[2,45],47:83,52:84},{19:[1,86]},{19:[2,50],31:[2,50]},{19:[2,51],21:[1,87],22:[1,51],24:[1,44],25:[1,43],31:[2,51],34:[1,39],35:[1,40],36:[1,41],37:[1,42],38:[1,45],39:[1,46],40:[1,47],41:[1,48],42:[1,49],43:[1,50],44:[1,52]},{5:[2,6],8:[2,6],10:[2,6],12:[2,6],13:[2,6],15:[2,6],20:[2,6],23:[2,6]},{5:[2,7],8:[2,7],10:[2,7],12:[2,7],13:[2,7],15:[2,7],20:[2,7],22:[1,51],23:[2,7],24:[1,44],25:[1,43],34:[1,39],35:[1,40],36:[1,41],37:[1,42],38:[1,45],39:[1,46],40:[1,47],41:[1,48],42:[1,49],43:[1,50],44:[1,52]},{19:[1,88],22:[1,51],24:[1,44],25:[1,43],34:[1,39],35:[1,40],36:[1,41],37:[1,42],38:[1,45],39:[1,46],40:[1,47],41:[1,48],42:[1,49],43:[1,50],44:[1,52]},{31:[1,89]},{13:[1,90]},{11:71,13:[1,25],16:16,17:91,18:[1,30],26:15,27:[1,17],28:18,29:20,30:[1,21],32:22,33:23,46:[1,24],48:[1,26],49:[1,27],50:[1,28],51:[1,29]},{5:[2,22],7:[2,22],8:[2,22],10:[2,22],12:[2,22],13:[2,22],15:[2,22],19:[2,22],20:[2,22],21:[2,22],22:[2,22],23:[2,22],24:[2,22],25:[2,22],31:[2,22],34:[2,22],35:[2,22],36:[1,41],37:[1,42],38:[2,22],39:[2,22],40:[2,22],41:[2,22],42:[2,22],43:[2,22],44:[2,22]},{5:[2,23],7:[2,23],8:[2,23],10:[2,23],12:[2,23],13:[2,23],15:[2,23],19:[2,23],20:[2,23],21:[2,23],22:[2,23],23:[2,23],24:[2,23],25:[2,23],31:[2,23],34:[2,23],35:[2,23],36:[1,41],37:[1,42],38:[2,23],39:[2,23],40:[2,23],41:[2,23],42:[2,23],43:[2,23],44:[2,23]},{5:[2,24],7:[2,24],8:[2,24],10:[2,24],12:[2,24],13:[2,24],15:[2,24],19:[2,24],20:[2,24],21:[2,24],22:[2,24],23:[2,24],24:[2,24],25:[2,24],31:[2,24],34:[2,24],35:[2,24],36:[2,24],37:[2,24],38:[2,24],39:[2,24],40:[2,24],41:[2,24],42:[2,24],43:[2,24],44:[2,24]},{5:[2,25],7:[2,25],8:[2,25],10:[2,25],12:[2,25],13:[2,25],15:[2,25],19:[2,25],20:[2,25],21:[2,25],22:[2,25],23:[2,25],24:[2,25],25:[2,25],31:[2,25],34:[2,25],35:[2,25],36:[2,25],37:[2,25],38:[2,25],39:[2,25],40:[2,25],41:[2,25],42:[2,25],43:[2,25],44:[2,25]},{5:[2,26],7:[2,26],8:[2,26],10:[2,26],12:[2,26],13:[2,26],15:[2,26],19:[2,26],20:[2,26],21:[2,26],23:[2,26],31:[2,26],34:[1,39],35:[1,40],36:[1,41],37:[1,42],42:[2,26],43:[2,26]},{5:[2,27],7:[2,27],8:[2,27],10:[2,27],12:[2,27],13:[2,27],15:[2,27],19:[2,27],20:[2,27],21:[2,27],23:[2,27],31:[2,27],34:[1,39],35:[1,40],36:[1,41],37:[1,42],42:[2,27],43:[2,27]},{5:[2,28],7:[2,28],8:[2,28],10:[2,28],12:[2,28],13:[2,28],15:[2,28],19:[2,28],20:[2,28],21:[2,28],23:[2,28],31:[2,28],34:[1,39],35:[1,40],36:[1,41],37:[1,42],42:[2,28],43:[2,28]},{5:[2,29],7:[2,29],8:[2,29],10:[2,29],12:[2,29],13:[2,29],15:[2,29],19:[2,29],20:[2,29],21:[2,29],23:[2,29],31:[2,29],34:[1,39],35:[1,40],36:[1,41],37:[1,42],42:[2,29],43:[2,29]},{5:[2,30],7:[2,30],8:[2,30],10:[2,30],12:[2,30],13:[2,30],15:[2,30],19:[2,30],20:[2,30],21:[2,30],23:[2,30],31:[2,30],34:[1,39],35:[1,40],36:[1,41],37:[1,42],42:[2,30],43:[2,30]},{5:[2,31],7:[2,31],8:[2,31],10:[2,31],12:[2,31],13:[2,31],15:[2,31],19:[2,31],20:[2,31],21:[2,31],23:[2,31],31:[2,31],34:[1,39],35:[1,40],36:[1,41],37:[1,42],42:[2,31],43:[2,31]},{5:[2,32],7:[2,32],8:[2,32],10:[2,32],12:[2,32],13:[2,32],15:[2,32],19:[2,32],20:[2,32],21:[2,32],22:[1,51],23:[2,32],24:[1,44],25:[1,43],31:[2,32],34:[1,39],35:[1,40],36:[1,41],37:[1,42],38:[1,45],39:[1,46],40:[1,47],41:[1,48],42:[2,32],43:[2,32],44:[1,52]},{5:[2,33],7:[2,33],8:[2,33],10:[2,33],12:[2,33],13:[2,33],15:[2,33],19:[2,33],20:[2,33],21:[2,33],22:[1,51],23:[2,33],24:[1,44],25:[1,43],31:[2,33],34:[1,39],35:[1,40],36:[1,41],37:[1,42],38:[1,45],39:[1,46],40:[1,47],41:[1,48],42:[2,33],43:[2,33],44:[1,52]},{5:[2,34],7:[2,34],8:[2,34],10:[2,34],12:[2,34],13:[2,34],15:[2,34],19:[2,34],20:[2,34],21:[2,34],23:[2,34],31:[2,34],34:[1,39],35:[1,40],36:[1,41],37:[1,42],42:[2,34],43:[2,34]},{5:[2,35],7:[2,35],8:[2,35],10:[2,35],12:[2,35],13:[2,35],15:[2,35],19:[2,35],20:[2,35],21:[2,35],23:[2,35],31:[2,35],34:[1,39],35:[1,40],36:[1,41],37:[1,42],42:[2,35],43:[2,35]},{8:[1,92]},{19:[1,93],22:[1,51],24:[1,44],25:[1,43],34:[1,39],35:[1,40],36:[1,41],37:[1,42],38:[1,45],39:[1,46],40:[1,47],41:[1,48],42:[1,49],43:[1,50],44:[1,52]},{5:[2,19],7:[2,19],8:[2,19],10:[2,19],12:[2,19],13:[2,19],15:[2,19],19:[2,19],20:[2,19],21:[2,19],22:[2,19],23:[2,19],24:[2,19],25:[2,19],31:[2,19],34:[2,19],35:[2,19],36:[2,19],37:[2,19],38:[2,19],39:[2,19],40:[2,19],41:[2,19],42:[2,19],43:[2,19],44:[2,19]},{31:[1,94]},{31:[2,46]},{21:[1,95],31:[2,47]},{5:[2,36],7:[2,36],8:[2,36],10:[2,36],12:[2,36],13:[2,36],15:[2,36],19:[2,36],20:[2,36],21:[2,36],22:[2,36],23:[2,36],24:[2,36],25:[2,36],31:[2,36],34:[2,36],35:[2,36],36:[2,36],37:[2,36],38:[2,36],39:[2,36],40:[2,36],41:[2,36],42:[2,36],43:[2,36],44:[2,36]},{11:59,13:[1,25],16:16,17:19,18:[1,30],26:15,27:[1,17],28:18,29:20,30:[1,21],32:22,33:23,46:[1,24],48:[1,26],49:[1,27],50:[1,28],51:[1,29],53:96},{14:[1,97]},{5:[2,38],7:[2,38],8:[2,38],10:[2,38],12:[2,38],13:[2,38],15:[2,38],19:[2,38],20:[2,38],21:[2,38],22:[2,38],23:[2,38],24:[2,38],25:[2,38],31:[2,38],34:[2,38],35:[2,38],36:[2,38],37:[2,38],38:[2,38],39:[2,38],40:[2,38],41:[2,38],42:[2,38],43:[2,38],44:[2,38]},{22:[1,98]},{18:[1,54],21:[1,99],22:[2,17],24:[2,17],25:[2,17],30:[1,35],34:[2,17],35:[2,17],36:[2,17],37:[2,17],38:[2,17],39:[2,17],40:[2,17],41:[2,17],42:[2,17],43:[2,17],44:[2,17]},{5:[2,2],7:[2,2],8:[2,2],10:[2,2],12:[2,2],13:[2,2],15:[2,2],19:[2,2],20:[2,2],21:[2,2],22:[2,2],23:[2,2],24:[2,2],25:[2,2],31:[2,2],34:[2,2],35:[2,2],36:[2,2],37:[2,2],38:[2,2],39:[2,2],40:[2,2],41:[2,2],42:[2,2],43:[2,2],44:[2,2]},{5:[2,39],7:[2,39],8:[2,39],10:[2,39],12:[2,39],13:[2,39],15:[2,39],19:[2,39],20:[2,39],21:[2,39],22:[2,39],23:[2,39],24:[2,39],25:[2,39],31:[2,39],34:[2,39],35:[2,39],36:[2,39],37:[2,39],38:[2,39],39:[2,39],40:[2,39],41:[2,39],42:[2,39],43:[2,39],44:[2,39]},{6:100,7:[1,53]},{13:[1,85],52:101},{19:[2,52],31:[2,52]},{11:102,13:[1,25],16:16,17:19,18:[1,30],26:15,27:[1,17],28:18,29:20,30:[1,21],32:22,33:23,46:[1,24],48:[1,26],49:[1,27],50:[1,28],51:[1,29]},{13:[1,25],17:103},{13:[1,25],17:104},{5:[2,37],7:[2,37],8:[2,37],10:[2,37],12:[2,37],13:[2,37],15:[2,37],19:[2,37],20:[2,37],21:[2,37],22:[2,37],23:[2,37],24:[2,37],25:[2,37],31:[2,37],34:[2,37],35:[2,37],36:[2,37],37:[2,37],38:[2,37],39:[2,37],40:[2,37],41:[2,37],42:[2,37],43:[2,37],44:[2,37]},{31:[2,48]},{5:[2,10],8:[2,10],10:[2,10],12:[2,10],13:[2,10],15:[2,10],20:[2,10],22:[1,51],23:[2,10],24:[1,44],25:[1,43],34:[1,39],35:[1,40],36:[1,41],37:[1,42],38:[1,45],39:[1,46],40:[1,47],41:[1,48],42:[1,49],43:[1,50],44:[1,52]},{6:105,7:[1,53]},{25:[1,106]},{5:[2,11],8:[2,11],10:[2,11],12:[2,11],13:[2,11],15:[2,11],20:[2,11],23:[2,11]},{5:[2,12],8:[2,12],10:[2,12],12:[2,12],13:[2,12],15:[2,12],20:[2,12],23:[2,12]}],
defaultActions: {12:[2,1],84:[2,46],101:[2,48]},
parseError: function parseError (str, hash) {
    throw new Error(str);
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == "undefined")
        this.lexer.yylloc = {};
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === "function")
        this.parseError = this.yy.parseError;
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || 1;
        if (typeof token !== "number") {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == "undefined") {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === "undefined" || !action.length || !action[0]) {
            var errStr = "";
            if (!recovering) {
                expected = [];
                for (p in table[state])
                    if (this.terminals_[p] && p > 2) {
                        expected.push("'" + this.terminals_[p] + "'");
                    }
                if (this.lexer.showPosition) {
                    errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                } else {
                    errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1?"end of input":"'" + (this.terminals_[symbol] || symbol) + "'");
                }
                this.parseError(errStr, {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
            }
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0)
                    recovering--;
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column};
            if (ranges) {
                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== "undefined") {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}
};

    function ast_action(name, data) {
        return { action_type: name, data: data };
    }

    function ast_action_conditional(condition, actions) {
        const data = { condition: condition, actions: actions };
        return ast_action('conditional', data);
    }

    function ast_action_while(condition, actions) {
        const data = { condition: condition, actions: actions };
        return ast_action('while', data);
    }

    function ast_action_assign(id, expr) {
        const data = { identifier: id, expression: expr};
        return ast_action('assign', data);
    }

    function ast_lone_expression(expression) {
        const data = { expression: expression };
        return ast_action('lone_expression', data);
    }

    function ast_action_assign_array_value(array, index, value) {
        const data = {
            array: array,
            index: index,
            value: value
        };

        return ast_action('assign_array_value', data);
    }

    function ast_for_each(index, value, array, loop_code) {
        const data = {
            each_index: index,
            each_value: value,
            array: array,
            loop_code: loop_code
        };
        return ast_action('for_each', data);
    }

    function ast_action_return(expr) {
        const data = { expression: expr };
        return ast_action('return', data);
    }

    function ast_promise(promise, success_callback, failure_callback) {
        const data = {
            promise: promise,
            success_callback: success_callback,
            failure_callback: failure_callback
        };

        return ast_action('promise', data);
    }

    function ast_expression(type, data) {
        return { expression_type: type, data: data };
    }

    function ast_expr_operation(operand, term1, term2) {
        const data = {
            operand: operand,
            term1: term1,
            term2: term2
        };

        return ast_expression('operation', data);
    }

    function ast_expr_call_func(func_name, func_args) {
        const data = {
            function: func_name,
            arguments: func_args
        };

        return ast_expression('call_func', data);
    }

    function ast_expr_define_func(func_args, func_body) {
        const data = {
            arguments: func_args,
            body: func_body
        };

        return ast_expression('define_func', data);
    }

    function ast_expr_array_contains(value, array) {
        const data = {
            value: value,
            array: array
        };

        return ast_expression('array_contains', data);
    }

    function ast_expr_array_contains_key(key, array) {
        const data = {
            key: key,
            array: array
        };

        return ast_expression('array_contains_key', data);
    }

    function ast_expr_raw_array(values) {
        const data = {
            values: values
        };

        return ast_expression('raw_array', data);
    }

    function ast_array_access(array_name, index) {
        const data = {
            reference: array_name,
            index: index
        };
        return ast_expression('array_access', data);
    }

    function ast_expr_ref(id) {
        const data = { reference: id };
        return ast_expression('ref', data);
    }

    function ast_expr_literal(value) {
        return ast_expression('literal', value);
    }

function Parser () { this.yy = {}; }Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();

export default grammar;
